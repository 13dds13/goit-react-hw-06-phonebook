{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/container/Container.module.css","components/filter/Filter.module.css","components/contactForm/ContactForm.js","redux/contacts/actionTypes/actionTypes.js","components/filter/Filter.js","redux/contacts/contactsActions/contactsActions.js","components/contactsList/ContactsList.js","service/storageService.js","components/App.js","service/contactsPrepations.js","redux/contacts/contactsReduser/contactsReduser.js","redux/rootReducer/rootReducer.js","redux/store.js","index.js","components/contactsList/ContactsList.module.css"],"names":["module","exports","ContactForm","addNewContact","dataUI","useState","FORM_INITIAL_DATA","state","setState","name","number","nameId","nanoid","numberId","handleChange","e","target","value","prev","inputName","inputTel","submitBtn","className","form","onSubmit","preventDefault","htmlFor","input","id","type","pattern","title","required","autoComplete","onChange","btn","ADD_CONTACT","REMOVE_CONTACT","SET_FILTER","mapDispatchToProps","setFilter","payload","connect","filter","inputSearch","findContactId","wrap","listWrap","styles","listItem","removeContact","contactsDataToRender","deleteBtn","noDataToRender","contacts","length","map","item","onClick","getDataFromStorage","dataFromStorage","localStorage","getItem","storageKey","JSON","parse","alertMsg","titleMain","titleSecondary","addContact","items","useEffect","dataToStorage","stringify","setItem","container","toLowerCase","includes","search","allContacts","contactsToRender","isAlreadyInContacts","newName","some","checkIsDoublingContacts","alert","contactsReducer","combineReducers","action","contact","rootReducer","contactsReduser","store","createStore","composeWithDevTools","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.abf649f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__HO2bO\",\"btn\":\"ContactForm_btn__2WjyN\",\"input\":\"ContactForm_input__2q0kP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2Nks-\",\"title\":\"Container_title__1cfht\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Filter_wrap__2dvuP\",\"listWrap\":\"Filter_listWrap__26zBX\",\"listItem\":\"Filter_listItem__3BfYS\",\"name\":\"Filter_name__3IoKK\",\"number\":\"Filter_number__3BkLe\",\"btn\":\"Filter_btn__1bv4Q\"};","import React, { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FORM_INITIAL_DATA } from \"../../data/initialData.json\";\r\nimport { form, btn, input } from \"./ContactForm.module.css\";\r\n\r\nconst ContactForm = ({ addNewContact, dataUI }) => {\r\n  const [state, setState] = useState({ ...FORM_INITIAL_DATA });\r\n  const { name, number } = state;\r\n\r\n  const nameId = nanoid();\r\n  const numberId = nanoid();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const resetStateData = () => {\r\n    setState({ ...FORM_INITIAL_DATA });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const wasAlreadyInContacts = addNewContact(name, number);\r\n\r\n    if (wasAlreadyInContacts) return;\r\n\r\n    resetStateData();\r\n  };\r\n\r\n  const { inputName, inputTel, submitBtn } = dataUI;\r\n\r\n  return (\r\n    <form className={form} onSubmit={handleSubmit}>\r\n      <label htmlFor={nameId}>{inputName}</label>\r\n      <input\r\n        className={input}\r\n        id={nameId}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={name}\r\n      />\r\n      <label htmlFor={numberId}>{inputTel}</label>\r\n      <input\r\n        className={input}\r\n        id={numberId}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={number}\r\n      />\r\n      <button className={btn} type=\"submit\">\r\n        {submitBtn}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func.isRequired,\r\n  dataUI: PropTypes.shape({\r\n    inputName: PropTypes.string.isRequired,\r\n    inputTel: PropTypes.string.isRequired,\r\n    submitBtn: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","const ADD_CONTACT = \"contacts/addContact\";\r\nconst REMOVE_CONTACT = \"contacts/removeContact\";\r\nconst SET_FILTER = \"contacts/setFilter\";\r\n\r\nexport { ADD_CONTACT, REMOVE_CONTACT, SET_FILTER };\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { wrap } from \"./Filter.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../../redux/contacts/contactsActions/contactsActions\";\r\n\r\nconst Filter = ({ filter, inputSearch, setFilter }) => {\r\n  const findContactId = nanoid();\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    setFilter(value);\r\n  };\r\n  return (\r\n    <div className={wrap}>\r\n      <label htmlFor={findContactId}>{inputSearch}</label>\r\n      <input\r\n        id={findContactId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  setFilter: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  inputSearch: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = { setFilter };\r\n\r\nexport default connect(null, mapDispatchToProps)(Filter);\r\n","import {\r\n  ADD_CONTACT,\r\n  REMOVE_CONTACT,\r\n  SET_FILTER,\r\n} from \"../actionTypes/actionTypes\";\r\n\r\nconst addContact = (payload) => ({\r\n  type: ADD_CONTACT,\r\n  payload,\r\n});\r\n\r\nconst removeContact = (payload) => ({\r\n  type: REMOVE_CONTACT,\r\n  payload,\r\n});\r\n\r\nconst setFilter = (payload) => ({\r\n  type: SET_FILTER,\r\n  payload,\r\n});\r\n\r\nexport { addContact, removeContact, setFilter };\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactsList.module.css\";\r\nimport { removeContact } from \"../../redux/contacts/contactsActions/contactsActions\";\r\n\r\nconst { listWrap, listItem, name, number, btn } = styles;\r\n\r\nconst ContactsList = ({ contactsDataToRender, removeContact, dataUI }) => {\r\n  const { deleteBtn, noDataToRender } = dataUI;\r\n  const { title, contacts } = contactsDataToRender;\r\n\r\n  return contacts.length ? (\r\n    <>\r\n      <p>{title}</p>\r\n      <ul className={listWrap}>\r\n        {contacts.map((item) => (\r\n          <li className={listItem} key={item.id}>\r\n            {\" \"}\r\n            <p className={name}>\r\n              {item.name}: <span className={number}>{item.number}</span>\r\n            </p>\r\n            <button\r\n              className={btn}\r\n              type=\"button\"\r\n              onClick={() => removeContact(item.name)}\r\n            >\r\n              {deleteBtn}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <p>{noDataToRender}</p>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  removeContact: PropTypes.func.isRequired,\r\n  contactsDataToRender: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n      })\r\n    ).isRequired,\r\n  }).isRequired,\r\n  dataUI: PropTypes.shape({\r\n    deleteBtn: PropTypes.string.isRequired,\r\n    noDataToRender: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = { removeContact };\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactsList);\r\n","import { storageKey } from \"../data/initialData.json\";\r\n\r\nconst getDataFromStorage = () => {\r\n  let dataFromStorage = localStorage.getItem(storageKey);\r\n  dataFromStorage = JSON.parse(dataFromStorage);\r\n  if (!dataFromStorage || dataFromStorage.length === 0) {\r\n    return;\r\n  }\r\n  return dataFromStorage;\r\n};\r\n\r\nexport default getDataFromStorage;\r\n","import React, { useEffect } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport Filter from \"./filter/Filter\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport styles from \"./container/Container.module.css\";\r\nimport { storageKey } from \"../data/initialData.json\";\r\nimport dataUI from \"../data/dataUI.json\";\r\nimport getDataFromStorage from \"../service/storageService\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../redux/contacts/contactsActions/contactsActions\";\r\nimport {\r\n  checkIsDoublingContacts,\r\n  contactsToRender,\r\n} from \"../service/contactsPrepations\";\r\n\r\nconst {\r\n  alertMsg,\r\n  titleMain,\r\n  titleSecondary,\r\n  inputName,\r\n  inputTel,\r\n  submitBtn,\r\n  deleteBtn,\r\n  inputSearch,\r\n  noDataToRender,\r\n} = dataUI;\r\n\r\nconst App = ({ contacts, filter, addContact }) => {\r\n  useEffect(() => {\r\n    const dataFromStorage = getDataFromStorage();\r\n    if (!dataFromStorage) return;\r\n    dataFromStorage.map(addContact);\r\n  }, [addContact]);\r\n\r\n  useEffect(() => {\r\n    const dataToStorage = JSON.stringify(contacts);\r\n    localStorage.setItem(storageKey, dataToStorage);\r\n  }, [contacts]);\r\n\r\n  const addNewContact = (name, number) => {\r\n    const isAlreadyInContacts = checkIsDoublingContacts(contacts, name);\r\n\r\n    if (isAlreadyInContacts) {\r\n      alert(`${name} ${alertMsg}`);\r\n      return isAlreadyInContacts;\r\n    }\r\n\r\n    addContact({\r\n      name,\r\n      id: nanoid(),\r\n      number,\r\n    });\r\n\r\n    return isAlreadyInContacts;\r\n  };\r\n\r\n  const { container, title } = styles;\r\n  const contactsDataToRender = contactsToRender(contacts, filter);\r\n\r\n  return (\r\n    <div className={container}>\r\n      <h2 className={title}>{titleMain}</h2>\r\n\r\n      <ContactForm\r\n        dataUI={{ inputName, inputTel, submitBtn }}\r\n        addNewContact={addNewContact}\r\n      />\r\n\r\n      <h2 className={title}>{titleSecondary}</h2>\r\n\r\n      <Filter inputSearch={inputSearch} filter={filter} />\r\n\r\n      <ContactsList\r\n        contactsDataToRender={contactsDataToRender}\r\n        dataUI={{ deleteBtn, noDataToRender }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nApp.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  contacts: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  filter: state.contacts.filter,\r\n  contacts: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = { addContact };\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import { allContacts, search } from \"../data/dataUI.json\";\r\n\r\nconst checkIsDoublingContacts = (contacts, newName) => {\r\n  const isAlreadyInContacts = contacts.some(\r\n    ({ name }) => name.toLowerCase() === newName.toLowerCase()\r\n  );\r\n  return isAlreadyInContacts;\r\n};\r\n\r\nconst contactsToRender = (contacts, filter) => {\r\n  if (!filter) {\r\n    return { contacts, title: `${allContacts}` };\r\n  }\r\n\r\n  const filteredContacts = contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  return { contacts: filteredContacts, title: `${search}` };\r\n};\r\n\r\nexport { checkIsDoublingContacts, contactsToRender };\r\n","import { combineReducers } from \"redux\";\r\nimport {\r\n  ADD_CONTACT,\r\n  REMOVE_CONTACT,\r\n  SET_FILTER,\r\n} from \"../actionTypes/actionTypes\";\r\n\r\nconst contactsItemReduser = (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_CONTACT:\r\n      return [...state, action.payload];\r\n\r\n    case REMOVE_CONTACT:\r\n      return state.filter((contact) => contact.name !== action.payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst contactsFilterReduser = (state = \"\", action) => {\r\n  switch (action.type) {\r\n    case SET_FILTER:\r\n      return action.payload;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst contactsReducer = combineReducers({\r\n  items: contactsItemReduser,\r\n  filter: contactsFilterReduser,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport contactsReduser from \"../contacts/contactsReduser/contactsReduser\";\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReduser,\r\n});\r\n\r\nexport default rootReducer;","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport rootReducer from \"./rootReducer/rootReducer\";\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport \"modern-normalize/modern-normalize.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"ContactsList_listWrap__XssPL\",\"listItem\":\"ContactsList_listItem__1ouJI\",\"btn\":\"ContactsList_btn__2_pGQ\",\"name\":\"ContactsList_name__3EcQj\",\"number\":\"ContactsList_number__38IIy\"};"],"sourceRoot":""}