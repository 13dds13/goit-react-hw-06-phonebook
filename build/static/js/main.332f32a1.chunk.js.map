{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/container/Container.module.css","components/filter/Filter.module.css","redux/contacts/contactsActions/contactsActions.js","redux/contacts/actionTypes/actionTypes.js","redux/contacts/contactsReduser/contactsReduser.js","redux/store.js","components/contactForm/ContactForm.js","components/filter/Filter.js","components/contactsList/ContactsList.js","redux/contacts/contactsSelector.js","service/contactsPrepations.js","components/App.js","index.js","components/contactsList/ContactsList.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","nanoid","removeContact","setFilter","items","createReducer","state","filter","contact","_","contactsReduser","combineReducers","persistConfig","key","storage","whitelist","store","configureStore","reducer","contacts","persistReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ContactForm","addNewContact","dataUI","useState","FORM_INITIAL_DATA","setState","nameId","numberId","handleChange","e","target","value","prev","inputName","inputTel","submitBtn","className","form","onSubmit","preventDefault","htmlFor","input","type","pattern","title","required","autoComplete","onChange","btn","Filter","inputSearch","useSelector","dispatch","useDispatch","findContactId","wrap","listWrap","styles","listItem","ContactsList","contactsDataToRender","deleteBtn","noDataToRender","length","map","item","onClick","getFilter","getContacts","getContactsData","contactsData","toLowerCase","includes","search","allContacts","contactsToRender","alertMsg","titleMain","titleSecondary","App","container","isAlreadyInContacts","newName","some","checkIsDoublingContacts","alert","ReactDOM","render","loading","document","getElementById"],"mappings":"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","file":"static/js/main.332f32a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__HO2bO\",\"btn\":\"ContactForm_btn__2WjyN\",\"input\":\"ContactForm_input__2q0kP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__2Nks-\",\"title\":\"Container_title__1cfht\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Filter_wrap__2dvuP\",\"listWrap\":\"Filter_listWrap__26zBX\",\"listItem\":\"Filter_listItem__3BfYS\",\"name\":\"Filter_name__3IoKK\",\"number\":\"Filter_number__3BkLe\",\"btn\":\"Filter_btn__1bv4Q\"};","import { createAction } from \"@reduxjs/toolkit\";\r\nimport { nanoid } from \"nanoid\";\r\nimport {\r\n  ADD_CONTACT,\r\n  REMOVE_CONTACT,\r\n  SET_FILTER,\r\n} from \"../actionTypes/actionTypes\";\r\n\r\nconst addContact = createAction(ADD_CONTACT, (name, number) => ({\r\n  payload: { id: nanoid(), number, name },\r\n}));\r\n\r\nconst removeContact = createAction(REMOVE_CONTACT);\r\n\r\nconst setFilter = createAction(SET_FILTER);\r\n\r\nexport { addContact, removeContact, setFilter };\r\n\r\n//===============Vanilla Redux===========================\r\n\r\n// import {\r\n//   ADD_CONTACT,\r\n//   REMOVE_CONTACT,\r\n//   SET_FILTER,\r\n// } from \"../actionTypes/actionTypes\";\r\n\r\n// const addContact = (payload) => ({\r\n//   type: ADD_CONTACT,\r\n//   payload,\r\n// });\r\n\r\n// const removeContact = (payload) => ({\r\n//   type: REMOVE_CONTACT,\r\n//   payload,\r\n// });\r\n\r\n// const setFilter = (payload) => ({\r\n//   type: SET_FILTER,\r\n//   payload,\r\n// });\r\n\r\n// export { addContact, removeContact, setFilter };\r\n","const ADD_CONTACT = \"contacts/addContact\";\r\nconst REMOVE_CONTACT = \"contacts/removeContact\";\r\nconst SET_FILTER = \"contacts/setFilter\";\r\n\r\nexport { ADD_CONTACT, REMOVE_CONTACT, SET_FILTER };\r\n","import { createReducer, combineReducers } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addContact,\r\n  removeContact,\r\n  setFilter,\r\n} from \"../contactsActions/contactsActions\";\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state = [], { payload }) => [...state, payload],\r\n  [removeContact]: (state = [], { payload }) =>\r\n    state.filter((contact) => contact.name !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [setFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst contactsReduser = combineReducers({ items, filter });\r\n\r\nexport default contactsReduser;\r\n\r\n//===============Vanilla Redux===========================\r\n\r\n// import { combineReducers } from \"redux\";\r\n// import {\r\n//   ADD_CONTACT,\r\n//   REMOVE_CONTACT,\r\n//   SET_FILTER,\r\n// } from \"../actionTypes/actionTypes\";\r\n\r\n// const contactsItemReduser = (state = [], action) => {\r\n//   switch (action.type) {\r\n//     case ADD_CONTACT:\r\n//       return [...state, action.payload];\r\n\r\n//     case REMOVE_CONTACT:\r\n//       return state.filter((contact) => contact.name !== action.payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactsFilterReduser = (state = \"\", action) => {\r\n//   switch (action.type) {\r\n//     case SET_FILTER:\r\n//       return action.payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const contactsReducer = combineReducers({\r\n//   items: contactsItemReduser,\r\n//   filter: contactsFilterReduser,\r\n// });\r\n\r\n// export default contactsReducer;\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactsReduser from \"./contacts/contactsReduser/contactsReduser\";\r\n\r\nconst persistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  whitelist: [\"items\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: persistReducer(persistConfig, contactsReduser) },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n\r\n//===============Vanilla Redux===========================\r\n\r\n// import { createStore } from \"redux\";\r\n// import { composeWithDevTools } from \"redux-devtools-extension\";\r\n// import rootReducer from \"./rootReducer/rootReducer\";\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n","import React, { useState } from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { FORM_INITIAL_DATA } from \"../../data/initialData.json\";\r\nimport { form, btn, input } from \"./ContactForm.module.css\";\r\n\r\nconst ContactForm = ({ addNewContact, dataUI }) => {\r\n  const [state, setState] = useState({ ...FORM_INITIAL_DATA });\r\n  const { name, number } = state;\r\n\r\n  const nameId = nanoid();\r\n  const numberId = nanoid();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setState((prev) => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  const resetStateData = () => {\r\n    setState({ ...FORM_INITIAL_DATA });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const wasAlreadyInContacts = addNewContact(name, number);\r\n\r\n    if (wasAlreadyInContacts) return;\r\n\r\n    resetStateData();\r\n  };\r\n\r\n  const { inputName, inputTel, submitBtn } = dataUI;\r\n\r\n  return (\r\n    <form className={form} onSubmit={handleSubmit}>\r\n      <label htmlFor={nameId}>{inputName}</label>\r\n      <input\r\n        className={input}\r\n        id={nameId}\r\n        type=\"text\"\r\n        name=\"name\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={name}\r\n      />\r\n      <label htmlFor={numberId}>{inputTel}</label>\r\n      <input\r\n        className={input}\r\n        id={numberId}\r\n        type=\"tel\"\r\n        name=\"number\"\r\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n        title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={number}\r\n      />\r\n      <button className={btn} type=\"submit\">\r\n        {submitBtn}\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nContactForm.propTypes = {\r\n  addNewContact: PropTypes.func.isRequired,\r\n  dataUI: PropTypes.shape({\r\n    inputName: PropTypes.string.isRequired,\r\n    inputTel: PropTypes.string.isRequired,\r\n    submitBtn: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport { nanoid } from \"nanoid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { wrap } from \"./Filter.module.css\";\r\nimport { setFilter } from \"../../redux/contacts/contactsActions/contactsActions\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst Filter = ({ inputSearch }) => {\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  const findContactId = nanoid();\r\n  const handleChange = (e) => {\r\n    const { value } = e.target;\r\n    dispatch(setFilter(value));\r\n  };\r\n  return (\r\n    <div className={wrap}>\r\n      <label htmlFor={findContactId}>{inputSearch}</label>\r\n      <input\r\n        id={findContactId}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n        autoComplete=\"off\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  inputSearch: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n\r\n//===================================================================\r\n\r\n//* whithout hooks\r\n\r\n// import React from \"react\";\r\n// import { nanoid } from \"nanoid\";\r\n// import PropTypes from \"prop-types\";\r\n// import { wrap } from \"./Filter.module.css\";\r\n// import { connect } from \"react-redux\";\r\n// import { setFilter } from \"../../redux/contacts/contactsActions/contactsActions\";\r\n\r\n// const Filter = ({ filter, inputSearch, setFilter }) => {\r\n//   const findContactId = nanoid();\r\n//   const handleChange = (e) => {\r\n//     const { value } = e.target;\r\n//     setFilter(value);\r\n//   };\r\n//   return (\r\n//     <div className={wrap}>\r\n//       <label htmlFor={findContactId}>{inputSearch}</label>\r\n//       <input\r\n//         id={findContactId}\r\n//         type=\"text\"\r\n//         name=\"filter\"\r\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//         title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//         required\r\n//         autoComplete=\"off\"\r\n//         onChange={handleChange}\r\n//         value={filter}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// Filter.propTypes = {\r\n//   setFilter: PropTypes.func.isRequired,\r\n//   filter: PropTypes.string.isRequired,\r\n//   inputSearch: PropTypes.string.isRequired,\r\n// };\r\n\r\n// const mapDispatchToProps = { setFilter };\r\n\r\n// export default connect(null, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactsList.module.css\";\r\nimport { removeContact } from \"../../redux/contacts/contactsActions/contactsActions\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst { listWrap, listItem, name, number, btn } = styles;\r\n\r\nconst ContactsList = ({ contactsDataToRender, dataUI }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { deleteBtn, noDataToRender } = dataUI;\r\n  const { title, contacts } = contactsDataToRender;\r\n\r\n  return contacts.length ? (\r\n    <>\r\n      <p>{title}</p>\r\n      <ul className={listWrap}>\r\n        {contacts.map((item) => (\r\n          <li className={listItem} key={item.id}>\r\n            {\" \"}\r\n            <p className={name}>\r\n              {item.name}: <span className={number}>{item.number}</span>\r\n            </p>\r\n            <button\r\n              className={btn}\r\n              type=\"button\"\r\n              onClick={() => dispatch(removeContact(item.name))}\r\n            >\r\n              {deleteBtn}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </>\r\n  ) : (\r\n    <p>{noDataToRender}</p>\r\n  );\r\n};\r\n\r\nContactsList.propTypes = {\r\n  contactsDataToRender: PropTypes.shape({\r\n    title: PropTypes.string.isRequired,\r\n    contacts: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        id: PropTypes.string,\r\n        name: PropTypes.string,\r\n        number: PropTypes.string,\r\n      })\r\n    ).isRequired,\r\n  }).isRequired,\r\n  dataUI: PropTypes.shape({\r\n    deleteBtn: PropTypes.string.isRequired,\r\n    noDataToRender: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n};\r\n\r\nexport default ContactsList;\r\n\r\n//===================================================================\r\n\r\n//* whithout hooks\r\n\r\n// import React from \"react\";\r\n// import { connect } from \"react-redux\";\r\n// import PropTypes from \"prop-types\";\r\n// import styles from \"./ContactsList.module.css\";\r\n// import { removeContact } from \"../../redux/contacts/contactsActions/contactsActions\";\r\n\r\n// const { listWrap, listItem, name, number, btn } = styles;\r\n\r\n// const ContactsList = ({ contactsDataToRender, removeContact, dataUI }) => {\r\n//   const { deleteBtn, noDataToRender } = dataUI;\r\n//   const { title, contacts } = contactsDataToRender;\r\n\r\n//   return contacts.length ? (\r\n//     <>\r\n//       <p>{title}</p>\r\n//       <ul className={listWrap}>\r\n//         {contacts.map((item) => (\r\n//           <li className={listItem} key={item.id}>\r\n//             {\" \"}\r\n//             <p className={name}>\r\n//               {item.name}: <span className={number}>{item.number}</span>\r\n//             </p>\r\n//             <button\r\n//               className={btn}\r\n//               type=\"button\"\r\n//               onClick={() => removeContact(item.name)}\r\n//             >\r\n//               {deleteBtn}\r\n//             </button>\r\n//           </li>\r\n//         ))}\r\n//       </ul>\r\n//     </>\r\n//   ) : (\r\n//     <p>{noDataToRender}</p>\r\n//   );\r\n// };\r\n\r\n// ContactsList.propTypes = {\r\n//   removeContact: PropTypes.func.isRequired,\r\n//   contactsDataToRender: PropTypes.shape({\r\n//     title: PropTypes.string.isRequired,\r\n//     contacts: PropTypes.arrayOf(\r\n//       PropTypes.shape({\r\n//         id: PropTypes.string,\r\n//         name: PropTypes.string,\r\n//         number: PropTypes.string,\r\n//       })\r\n//     ).isRequired,\r\n//   }).isRequired,\r\n//   dataUI: PropTypes.shape({\r\n//     deleteBtn: PropTypes.string.isRequired,\r\n//     noDataToRender: PropTypes.string.isRequired,\r\n//   }).isRequired,\r\n// };\r\n\r\n// const mapDispatchToProps = { removeContact };\r\n\r\n// export default connect(null, mapDispatchToProps)(ContactsList);\r\n","import { contactsToRender } from \"../../service/contactsPrepations\";\r\n\r\nconst getFilter = (state) => state.contacts.filter;\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\n\r\nconst getContactsData = (state) => {\r\n  const filter = getFilter(state);\r\n  const contacts = getContacts(state);\r\n  const contactsData = contactsToRender(contacts, filter);\r\n  return contactsData;\r\n};\r\n\r\nexport { getContacts, getFilter, getContactsData };\r\n","import { allContacts, search } from \"../data/dataUI.json\";\r\n\r\nconst checkIsDoublingContacts = (contacts, newName) => {\r\n  const isAlreadyInContacts = contacts.some(\r\n    ({ name }) => name.toLowerCase() === newName.toLowerCase()\r\n  );\r\n  return isAlreadyInContacts;\r\n};\r\n\r\nconst contactsToRender = (contacts, filter) => {\r\n  if (!filter) {\r\n    return { contacts, title: `${allContacts}` };\r\n  }\r\n  const filteredContacts = contacts.filter(({ name }) =>\r\n    name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n  return { contacts: filteredContacts, title: `${search}` };\r\n};\r\n\r\n//===============================================================\r\n// const contactsToRender = (state) => {\r\n//   const contacts = state.contacts.items;\r\n//   const filter = state.contacts.filter;\r\n//   if (!filter) {\r\n//     return { contacts, title: `${allContacts}` };\r\n//   }\r\n\r\n//   const filteredContacts = contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n\r\n//   return { contacts: filteredContacts, title: `${search}` };\r\n// };\r\n\r\nexport { checkIsDoublingContacts, contactsToRender };\r\n","import React from \"react\";\r\nimport ContactForm from \"./contactForm/ContactForm\";\r\nimport Filter from \"./filter/Filter\";\r\nimport ContactsList from \"./contactsList/ContactsList\";\r\nimport styles from \"./container/Container.module.css\";\r\nimport dataUI from \"../data/dataUI.json\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addContact } from \"../redux/contacts/contactsActions/contactsActions\";\r\nimport { checkIsDoublingContacts } from \"../service/contactsPrepations\";\r\nimport {\r\n  getContacts,\r\n  getContactsData,\r\n  getFilter,\r\n} from \"../redux/contacts/contactsSelector\";\r\n\r\nconst {\r\n  alertMsg,\r\n  titleMain,\r\n  titleSecondary,\r\n  inputName,\r\n  inputTel,\r\n  submitBtn,\r\n  deleteBtn,\r\n  inputSearch,\r\n  noDataToRender,\r\n} = dataUI;\r\n\r\nconst App = () => {\r\n  const contacts = useSelector(getContacts);\r\n  const contactsDataToRender = useSelector(getContactsData);\r\n  const filter = useSelector(getFilter);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const addNewContact = (name, number) => {\r\n    const isAlreadyInContacts = checkIsDoublingContacts(contacts, name);\r\n\r\n    if (isAlreadyInContacts) {\r\n      alert(`${name} ${alertMsg}`);\r\n      return isAlreadyInContacts;\r\n    }\r\n    dispatch(addContact(name, number));\r\n\r\n    return isAlreadyInContacts;\r\n  };\r\n\r\n  const { container, title } = styles;\r\n\r\n  return (\r\n    <div className={container}>\r\n      <h2 className={title}>{titleMain}</h2>\r\n\r\n      <ContactForm\r\n        dataUI={{ inputName, inputTel, submitBtn }}\r\n        addNewContact={addNewContact}\r\n      />\r\n\r\n      <h2 className={title}>{titleSecondary}</h2>\r\n\r\n      <Filter inputSearch={inputSearch} filter={filter} />\r\n\r\n      <ContactsList\r\n        contactsDataToRender={contactsDataToRender}\r\n        dataUI={{ deleteBtn, noDataToRender }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n//===================================================================\r\n\r\n//* whithout hooks\r\n\r\n// import React, { useEffect } from \"react\";\r\n// import { nanoid } from \"nanoid\";\r\n// import PropTypes from \"prop-types\";\r\n// import ContactForm from \"./contactForm/ContactForm\";\r\n// import Filter from \"./filter/Filter\";\r\n// import ContactsList from \"./contactsList/ContactsList\";\r\n// import styles from \"./container/Container.module.css\";\r\n// import { storageKey } from \"../data/initialData.json\";\r\n// import dataUI from \"../data/dataUI.json\";\r\n// import getDataFromStorage from \"../service/storageService\";\r\n// import { connect } from \"react-redux\";\r\n// import { addContact } from \"../redux/contacts/contactsActions/contactsActions\";\r\n// import {\r\n//   checkIsDoublingContacts,\r\n//   contactsToRender,\r\n// } from \"../service/contactsPrepations\";\r\n\r\n// const {\r\n//   alertMsg,\r\n//   titleMain,\r\n//   titleSecondary,\r\n//   inputName,\r\n//   inputTel,\r\n//   submitBtn,\r\n//   deleteBtn,\r\n//   inputSearch,\r\n//   noDataToRender,\r\n// } = dataUI;\r\n\r\n// const App = ({ contactsData, filter, addContact }) => {\r\n//   const { contacts } = contactsData;\r\n//   useEffect(() => {\r\n//     const dataFromStorage = getDataFromStorage();\r\n//     if (!dataFromStorage) return;\r\n//     dataFromStorage.map(addContact);\r\n//   }, [addContact]);\r\n\r\n//   useEffect(() => {\r\n//     const dataToStorage = JSON.stringify(contacts);\r\n//     localStorage.setItem(storageKey, dataToStorage);\r\n//   }, [contacts]);\r\n\r\n//   const addNewContact = (name, number) => {\r\n//     const isAlreadyInContacts = checkIsDoublingContacts(contacts, name);\r\n\r\n//     if (isAlreadyInContacts) {\r\n//       alert(`${name} ${alertMsg}`);\r\n//       return isAlreadyInContacts;\r\n//     }\r\n\r\n//     addContact({\r\n//       name,\r\n//       id: nanoid(),\r\n//       number,\r\n//     });\r\n\r\n//     return isAlreadyInContacts;\r\n//   };\r\n\r\n//   const { container, title } = styles;\r\n\r\n//   return (\r\n//     <div className={container}>\r\n//       <h2 className={title}>{titleMain}</h2>\r\n\r\n//       <ContactForm\r\n//         dataUI={{ inputName, inputTel, submitBtn }}\r\n//         addNewContact={addNewContact}\r\n//       />\r\n\r\n//       <h2 className={title}>{titleSecondary}</h2>\r\n\r\n//       <Filter inputSearch={inputSearch} filter={filter} />\r\n\r\n//       <ContactsList\r\n//         contactsDataToRender={contactsData}\r\n//         dataUI={{ deleteBtn, noDataToRender }}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// App.propTypes = {\r\n//   addContact: PropTypes.func.isRequired,\r\n//   filter: PropTypes.string.isRequired,\r\n//   contacts: PropTypes.arrayOf(PropTypes.object),\r\n// };\r\n\r\n// const mapStateToProps = (state) => ({\r\n//   filter: state.contacts.filter,\r\n//   contactsData: contactsToRender(state),\r\n// });\r\n\r\n// const mapDispatchToProps = { addContact };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport \"modern-normalize/modern-normalize.css\";\nimport { store, persistor } from \"./redux/store\";\nimport App from \"./components/App\";\nimport \"./index.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"listWrap\":\"ContactsList_listWrap__XssPL\",\"listItem\":\"ContactsList_listItem__1ouJI\",\"btn\":\"ContactsList_btn__2_pGQ\",\"name\":\"ContactsList_name__3EcQj\",\"number\":\"ContactsList_number__38IIy\"};"],"sourceRoot":""}